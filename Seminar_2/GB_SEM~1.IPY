{
  "nbformat": 4,
  "nbformat_minor": 0,
  "metadata": {
    "colab": {
      "provenance": []
    },
    "kernelspec": {
      "name": "python3",
      "display_name": "Python 3"
    },
    "language_info": {
      "name": "python"
    }
  },
  "cells": [
    {
      "cell_type": "markdown",
      "source": [
        "## Курс \"Библиотеки Python для Data Science: Numpy, Matplotlib, Scikit-learn\"\n",
        "## Практическое задание к семинару № 2 от 23-05-2024"
      ],
      "metadata": {
        "id": "IXn2iJXSVSYO"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Тема “Вычисления с помощью Numpy”"
      ],
      "metadata": {
        "id": "d_lGvD_CWA1c"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Задание 1\n",
        "Создайте массив Numpy под названием a размером 5x2, то есть состоящий из 5 строк\n",
        "и 2 столбцов. Первый столбец должен содержать числа 1, 2, 3, 3, 1, а второй - числа 6,\n",
        "8, 11, 10, 7. Будем считать, что каждый столбец - это признак, а строка - наблюдение.\n",
        "Затем найдите среднее значение по каждому признаку, используя метод mean массива\n",
        "Numpy. Результат запишите в массив mean_a, в нем должно быть 2 элемента."
      ],
      "metadata": {
        "id": "4O7Yv0J8WHUT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import numpy as np\n",
        "\n",
        "# Создаем массив a размером 5x2\n",
        "a = np.array([[1, 6],\n",
        "              [2, 8],\n",
        "              [3, 11],\n",
        "              [3, 10],\n",
        "              [1, 7]])\n",
        "\n",
        "# Находим среднее значение по каждому признаку (столбцу)\n",
        "mean_a = np.mean(a, axis=0)\n",
        "\n",
        "# Выводим массив mean_a\n",
        "print(mean_a)"
      ],
      "metadata": {
        "id": "xediFpVSWQ8R",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9cf77879-34f0-4d04-c1ff-3d0233866b4f"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[2.  8.4]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Задание 2\n",
        "Вычислите массив a_centered, отняв от значений массива “а” средние значения\n",
        "соответствующих признаков, содержащиеся в массиве mean_a. Вычисление должно\n",
        "производиться в одно действие. Получившийся массив должен иметь размер 5x2."
      ],
      "metadata": {
        "id": "gCyl4OOQWTaP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Вычитаем средние значения из массива a, чтобы получить массив a_centered\n",
        "a_centered = a - mean_a\n",
        "\n",
        "# Выводим массив a_centered\n",
        "print(a_centered)"
      ],
      "metadata": {
        "id": "zNLBJtFmWmOq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "5a8c3a14-adbf-4483-cbd0-9788298ff4de"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "[[-1.  -2.4]\n",
            " [ 0.  -0.4]\n",
            " [ 1.   2.6]\n",
            " [ 1.   1.6]\n",
            " [-1.  -1.4]]\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Задание 3\n",
        "Найдите скалярное произведение столбцов массива a_centered. В результате должна\n",
        "получиться величина a_centered_sp. Затем поделите a_centered_sp на N-1, где N - число наблюдений."
      ],
      "metadata": {
        "id": "jKGTi2DBWvv5"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Находим скалярное произведение столбцов массива a_centered\n",
        "a_centered_sp = np.dot(a_centered[:, 0], a_centered[:, 1])\n",
        "\n",
        "# Число наблюдений\n",
        "N = a.shape[0]\n",
        "\n",
        "# Делим a_centered_sp на N-1\n",
        "result = a_centered_sp / (N - 1)\n",
        "\n",
        "print(\"Скалярное произведение столбцов массива a_centered:\", a_centered_sp)\n",
        "print(\"Результат деления на N-1:\", result)"
      ],
      "metadata": {
        "id": "k3bt4euBW7Xq",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "f748cea4-ce25-4548-bce2-621d620c252a"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Скалярное произведение столбцов массива a_centered: 8.0\n",
            "Результат деления на N-1: 2.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Задание 4**\n",
        "Число, которое мы получили в конце задания 3 является ковариацией двух признаков, содержащихся\n",
        "в массиве “а”. В задании 4 мы делили сумму произведений центрированных признаков на N-1, а не на\n",
        "N, поэтому полученная нами величина является несмещенной оценкой ковариации.<p/>\n",
        "\n",
        "В этом задании проверьте получившееся число, вычислив ковариацию еще одним способом - с\n",
        "помощью функции np.cov. В качестве аргумента m функция np.cov должна принимать\n",
        "транспонированный массив “a”. В получившейся ковариационной матрице (массив Numpy размером\n",
        "2x2) искомое значение ковариации будет равно элементу в строке с индексом 0 и столбце с индексом\n",
        "1."
      ],
      "metadata": {
        "id": "SZdrk0u2W9Ij"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Вычисляем ковариационную матрицу с помощью np.cov\n",
        "cov_matrix = np.cov(a.T)\n",
        "\n",
        "# Искомое значение ковариации будет равно элементу в строке с индексом 0 и столбце с индексом 1\n",
        "cov_value = cov_matrix[0, 1]\n",
        "\n",
        "print(\"Ковариационная матрица:\\n\", cov_matrix)\n",
        "print(\"Искомое значение ковариации:\", cov_value)"
      ],
      "metadata": {
        "id": "R-vNwb5nXw3e",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "47d25e18-0f00-4c80-f71f-a2dce4e3fb74"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Ковариационная матрица:\n",
            " [[1.  2. ]\n",
            " [2.  4.3]]\n",
            "Искомое значение ковариации: 2.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Тема “Работа с данными в Pandas”"
      ],
      "metadata": {
        "id": "3Y455jQeXP_a"
      }
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Задание 1\n",
        "Импортируйте библиотеку Pandas и дайте ей псевдоним pd. Создайте датафрейм authors со\n",
        "столбцами author_id и author_name, в которых соответственно содержатся данные: [1, 2, 3] и\n",
        "['Тургенев', 'Чехов', 'Островский'].\n",
        "<p/>Затем создайте датафрейм book cо столбцами author_id, book_title и price, в которых соответственно\n",
        "содержатся данные:\n",
        "<p/>[1, 1, 1, 2, 2, 3, 3],\n",
        "<p/>['Отцы и дети', 'Рудин', 'Дворянское гнездо', 'Толстый и тонкий', 'Дама с собачкой', 'Гроза', 'Таланты и\n",
        "поклонники']\n",
        "<p/>[500, 400, 300, 350, 450, 600, 200]"
      ],
      "metadata": {
        "id": "7nFlsxzNY9sU"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "import pandas as pd\n",
        "\n",
        "# Создаем датафрейм authors\n",
        "authors = pd.DataFrame({\n",
        "    'author_id': [1, 2, 3],\n",
        "    'author_name': ['Тургенев', 'Чехов', 'Островский']\n",
        "})\n",
        "\n",
        "# Создаем датафрейм book\n",
        "books = pd.DataFrame({\n",
        "    'author_id': [1, 1, 1, 2, 2, 3, 3],\n",
        "    'book_title': ['Отцы и дети', 'Рудин', 'Дворянское гнездо', 'Толстый и тонкий', 'Дама с собачкой', 'Гроза', 'Таланты и поклонники'],\n",
        "    'price': [500, 400, 300, 350, 450, 600, 200]\n",
        "})\n",
        "\n",
        "# Выводим датафреймы на экран\n",
        "print(\"Authors DataFrame:\")\n",
        "print(authors)\n",
        "print(\"\\nBooks DataFrame:\")\n",
        "print(book)"
      ],
      "metadata": {
        "id": "t5pX4NSjZjWx",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "7da49190-fc99-4449-fac7-902a15a68721"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "Authors DataFrame:\n",
            "   author_id author_name\n",
            "0          1    Тургенев\n",
            "1          2       Чехов\n",
            "2          3  Островский\n",
            "\n",
            "Books DataFrame:\n",
            "   author_id            book_title  price\n",
            "0          1           Отцы и дети    500\n",
            "1          1                 Рудин    400\n",
            "2          1     Дворянское гнездо    300\n",
            "3          2      Толстый и тонкий    350\n",
            "4          2       Дама с собачкой    450\n",
            "5          3                 Гроза    600\n",
            "6          3  Таланты и поклонники    200\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Задание 2\n",
        "Получите датафрейм authors_price, соединив дата фреймы authors и books по полю author_id."
      ],
      "metadata": {
        "id": "z_lzq4oBZlda"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Объединяем датафреймы authors и books по полю author_id\n",
        "authors_price = pd.merge(authors, books, on='author_id')\n",
        "\n",
        "# Выводим результат на экран\n",
        "print(authors_price)"
      ],
      "metadata": {
        "id": "LUAOMHIlZ1dB",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "1fdc662c-eecd-4e90-b3da-a6f14c95a758"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   author_id author_name            book_title  price\n",
            "0          1    Тургенев           Отцы и дети    500\n",
            "1          1    Тургенев                 Рудин    400\n",
            "2          1    Тургенев     Дворянское гнездо    300\n",
            "3          2       Чехов      Толстый и тонкий    350\n",
            "4          2       Чехов       Дама с собачкой    450\n",
            "5          3  Островский                 Гроза    600\n",
            "6          3  Островский  Таланты и поклонники    200\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "## Задание 3\n",
        "Создайте датафрейм top5, в котором содержатся строки из authors_price с пятью самыми дорогими\n",
        "книгами."
      ],
      "metadata": {
        "id": "FU2QYoP8Z3Cn"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Получаем датафрейм top5 с пятью самыми дорогими книгами\n",
        "top5 = authors_price.nlargest(5, 'price')\n",
        "\n",
        "# Выводим результат на экран\n",
        "print(top5)"
      ],
      "metadata": {
        "id": "JDp3g2i4aO5Z",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "8a63b069-f51a-4ea8-cd0b-ae834cbf8fa7"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "   author_id author_name        book_title  price\n",
            "5          3  Островский             Гроза    600\n",
            "0          1    Тургенев       Отцы и дети    500\n",
            "4          2       Чехов   Дама с собачкой    450\n",
            "1          1    Тургенев             Рудин    400\n",
            "3          2       Чехов  Толстый и тонкий    350\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Задание 4\n",
        "Создайте датафрейм authors_stat на основе информации из authors_price. В датафрейме authors_stat\n",
        "должны быть четыре столбца:\n",
        "author_name, min_price, max_price и mean_price,\n",
        "в которых должны содержаться соответственно имя автора, минимальная, максимальная и средняя\n",
        "цена на книги этого автора."
      ],
      "metadata": {
        "id": "4c6QlKK9aPxT"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Создаем ноый дата фрейм путем группировки по имени автора и вычисляем минимальную, максимальную и среднюю цену\n",
        "authors_stat = authors_price.groupby('author_name').agg(\n",
        "    min_price=('price', 'min'),\n",
        "    max_price=('price', 'max'),\n",
        "    mean_price=('price', 'mean')\n",
        ").reset_index()\n",
        "\n",
        "# Выводим результат на экран\n",
        "print(authors_stat)"
      ],
      "metadata": {
        "id": "KQzzZUKbaYZ5",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "73cbc956-f652-4fb1-8146-53cf43becb26"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "  author_name  min_price  max_price  mean_price\n",
            "0  Островский        200        600       400.0\n",
            "1    Тургенев        300        500       400.0\n",
            "2       Чехов        350        450       400.0\n"
          ]
        }
      ]
    },
    {
      "cell_type": "markdown",
      "source": [
        "### Задание 5**\n",
        "Создайте новый столбец в датафрейме authors_price под названием cover, в нем будут располагаться\n",
        "данные о том, какая обложка у данной книги - твердая или мягкая. В этот столбец поместите данные из следующего списка:\n",
        "<p/>['твердая', 'мягкая', 'мягкая', 'твердая', 'твердая', 'мягкая', 'мягкая'].\n",
        "<p/>Просмотрите документацию по функции pd.pivot table с помощью вопросительного знака.\n",
        "<p/>Для каждого автора посчитайте суммарную стоимость книг в твердой и мягкой обложке. Используйте\n",
        "для этого функцию pd.pivot_table. При этом столбцы должны называться \"твердая\" и \"мягкая\", а индексами должны быть фамилии авторов. Пропущенные значения стоимостей заполните нулями, при необходимости загрузите библиотеку Numpy. Назовите полученный датасет book_info и сохраните его в формат pickle под названием\n",
        "\"book_info.pkl\". Затем загрузите из этого файла датафрейм и назовите его book_info2. Удостоверьтесь, что датафреймы book_info и book_info2 идентичны."
      ],
      "metadata": {
        "id": "ohLeKQbqaZJP"
      }
    },
    {
      "cell_type": "code",
      "source": [
        "# Добавляем новый столбец 'cover'\n",
        "authors_price['cover'] = ['твердая', 'мягкая', 'мягкая', 'твердая', 'твердая', 'мягкая', 'мягкая']\n",
        "\n",
        "# Просматриваем документацию по функции pd.pivot_table\n",
        "# ?pd.pivot_table\n",
        "\n",
        "# Используем функцию pd.pivot_table для создания сводной таблицы\n",
        "book_info = pd.pivot_table(authors_price,\n",
        "                           values='price',\n",
        "                           index='author_name',\n",
        "                           columns='cover',\n",
        "                           aggfunc='sum',\n",
        "                           fill_value=0)\n",
        "\n",
        "# Переименовываем столбцы\n",
        "book_info.columns.name = None\n",
        "\n",
        "# Сохраняем датафрейм book_info в формате pickle\n",
        "book_info.to_pickle('book_info.pkl')\n",
        "\n",
        "# Загружаем датафрейм из файла\n",
        "book_info2 = pd.read_pickle('book_info.pkl')\n",
        "\n",
        "# Проверяем идентичность датафреймов\n",
        "print(book_info)\n",
        "print(book_info2)\n",
        "print(f'Датафреймы идентичны: {book_info.equals(book_info2)}')"
      ],
      "metadata": {
        "id": "qfm1GhfobZHz",
        "colab": {
          "base_uri": "https://localhost:8080/"
        },
        "outputId": "9a95352d-4e3b-4341-9fa5-d059c16dc9b4"
      },
      "execution_count": null,
      "outputs": [
        {
          "output_type": "stream",
          "name": "stdout",
          "text": [
            "             мягкая  твердая\n",
            "author_name                 \n",
            "Островский      800        0\n",
            "Тургенев        700      500\n",
            "Чехов             0      800\n",
            "             мягкая  твердая\n",
            "author_name                 \n",
            "Островский      800        0\n",
            "Тургенев        700      500\n",
            "Чехов             0      800\n",
            "Датафреймы идентичны: True\n"
          ]
        }
      ]
    }
  ]
}